# Building top-level Rust
#
# We build all of the the rust code that is included in lk with a single invocation of make.  Cargo
# does a good job of managing all of the dependencies within Rust (with the main work needed on our
# part are the header files used by bindgen.
#
# In order to allow rust-analyzer to be used naturally, we synthesize the top-level crate that cargo
# builds.  This crate will consist of references to the top-level crates selected to be included in
# the build.

LOCAL_DIR := $(GET_LOCAL_DIR)

# This must match the crate name in the Cargo.toml.
CRATE_NAME := rust_support

MODULE := $(LOCAL_DIR)

MODULES += $(MODULE)

MODULE_SRCDIR := $(MODULE)
MODULE_BUILDDIR := $(call TOBUILDDIR,$(MODULE_SRCDIR))

MODULE_SRCS := \
	       $(MODULE_SRCDIR)/Cargo.toml \
	       $(MODULE_SRCDIR)/src/lib.rs
MODULE_OBJS := $(foreach d,$(MODULE_SRCS),$(call TOBUILDDIR,$(d)))

# The platform must set RUST_TARGET and RUST_TARGET_PATH. If RUST_TARGET is a
# standard tuple, RUST_TARGET_PATH should have the same value. Otherwise,
# RUST_TARGET_PATH should point to the custom target json file, and RUST_TARGET
# should be the basename of the json file.

ifeq ($(RUST_TARGET),)
$(error RUST_TARGET is not set for rust support)
endif

ifeq ($(RUST_TARGET_PATH),)
RUST_TARGET_PATH := $(RUST_TARGET)
endif

define TOML_ESC
$(subst \,\\,$(subst ",\",$1))
endef

CARGO_CONFIG := $(MODULE_BUILDDIR)/.cargo/config.toml

# TODO: Allow debug/release builds
MODULE_OBJECT := $(call TOBUILDDIR,$(MODULE_SRCDIR)/target/$(RUST_TARGET)/debug/lib$(CRATE_NAME).a)

$(MODULE_OBJECT).phony:
.PHONY: $(MODULE_OBJECT).phony

$(MODULE_OBJECT): MODULE_BUILDDIR:=$(MODULE_BUILDDIR)

# Override with module local values for the build rule.
$(MODULE_OBJECT): $(MODULE_OBJECT).phony $(MODULE_OBJS) $(CARGO_CONFIG)
	cd $(MODULE_BUILDDIR); \
		cargo +nightly build

EXTRA_OBJS := $(EXTRA_OBJS) $(MODULE_OBJECT)

# Bring in the source files via copy.
# The toml file will have a substitution to fix up references to the buildroot.
$(MODULE_BUILDDIR)/%: $(MODULE_SRCDIR)/%.in target.phony
	$(NOECHO)echo generating $@
	$(NOECHO)mkdir -p $(dir $@)
	$(NOECHO)sed 's|@BUILDROOT@|$(call TOML_ESC,$(abspath $(BUILDROOT)))|g' $< > $@.tmp
	$(NOECHO)$(call TESTANDREPLACEFILE,$@.tmp,$@)
$(MODULE_BUILDDIR)/src/%: $(MODULE_SRCDIR)/src/%.in target.phony
	$(NOECHO)echo generating $@
	$(NOECHO)mkdir -p $(dir $@)
	$(NOECHO)cp $< $@.tmp
	$(NOECHO)$(call TESTANDREPLACEFILE,$@.tmp,$@)

.PHONY: target.phony

$(CARGO_CONFIG).phony:
.PHONY: $(CARGO_CONFIG).phony

$(CARGO_CONFIG): MODULE_SRCDIR:=$(MODULE_SRCDIR)

$(CARGO_CONFIG): $(CARGO_CONFIG).phony
	$(NOECHO)mkdir -p $(dir $@)
	$(NOECHO)tmp="$@.tmp"; { \
		echo "# AUTOGENERATED -- edit $(MODULE_SRCDIR)/rules.mk instead"; \
		echo "[build]"; \
		echo 'target = "$(RUST_TARGET_PATH)"'; \
		echo; \
		echo "[env]"; \
		echo 'GLOBAL_INCLUDES = { value = "$(call TOML_ESC,$(GLOBAL_INCLUDES))", force = true }'; \
		echo; \
		echo "[unstable]"; \
		echo 'build-std = ["core", "alloc"]'; \
	} > "$$tmp"; \
	$(call TESTANDREPLACEFILE,$$tmp,$@)

MODULE :=
MODULE_SRCDIR :=
MODULE_BUILDDIR :=
MODULE_OBJECT :=
MODULE_SRCS :=
MODULE_OBJS :=

CARGO_CONFIG :=
